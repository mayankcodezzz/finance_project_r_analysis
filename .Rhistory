gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_brand,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
table(cards_long$PIN_Change_Due)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns (replace age_group with gender)
cards_long <- data %>%
select(id, gender, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert gender to a factor (assuming "Female" and "Male" as levels)
# Adjust levels based on your actual data
cards_long <- cards_long %>%
mutate(gender = factor(gender, levels = c("Female", "Male")))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model (use gender instead of age_group_num)
gee_model <- geeglm(PIN_Change_Due ~ gender + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns (replace age_group with gender)
cards_long <- data %>%
select(id, gender, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert gender to a factor (assuming "Female" and "Male" as levels)
# Adjust levels based on your actual data
cards_long <- cards_long %>%
mutate(gender = factor(gender, levels = c("Female", "Male")))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model (use gender instead of age_group_num)
gee_model <- geeglm(PIN_Change_Due ~ gender + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, num_cards_issued, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, num_cards_issued, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + num_cards_issued,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns num_cards_issued show how many time each card/sane card was issued
cards_long <- data %>%
select(id, age_group, num_cards_issued, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + num_cards_issued,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
# Assume age_group levels like "18-30", "31-45", "46-60", "60+" (adjust based on your data)
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4,
))
# Check the first few rows
head(cards_long)
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
summary(gee_model)
# Perform Type III-style Wald tests
anova(gee_model)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4
))
# Check the first few rows
cat("First few rows of transformed data:\n")
print(head(cards_long))
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Descriptive Statistics (New Section)
# Overall summary for PIN_Change_Due
overall_summary <- cards_long %>%
summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4
))
# Check the first few rows
cat("First few rows of transformed data:\n")
print(head(cards_long))
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Descriptive Statistics (New Section)
# Overall summary for PIN_Change_Due
overall_summary <- cards_long %>%
dyplr::summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Load required libraries
library(tidyverse)
library(geepack)
# Step 1: Load and transform the data
data <- read.csv("data/merged_data.csv")
# Select relevant columns
cards_long <- data %>%
select(id, age_group, card_type, PIN_Change_Due, id.y)
# Convert PIN_Change_Due to binary (1 = Yes, 0 = No)
cards_long$PIN_Change_Due <- ifelse(cards_long$PIN_Change_Due == "Yes", 1, 0)
# Convert age_group to ordinal numeric
cards_long <- cards_long %>%
mutate(age_group_num = case_when(
age_group == "18-30" ~ 1,
age_group == "31-45" ~ 2,
age_group == "46-60" ~ 3,
age_group == "60+" ~ 4
))
# Check the first few rows
cat("First few rows of transformed data:\n")
print(head(cards_long))
# Save the transformed data
write.csv(cards_long, "data/cards_long_transformed.csv", row.names = FALSE)
cat("Transformed data saved as 'cards_long_transformed.csv'\n")
# Step 2: Descriptive Statistics (New Section)
# Overall summary for PIN_Change_Due
overall_summary <- cards_long %>%
dplyr::summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Descriptive statistics by age_group
age_group_summary <- cards_long %>%
group_by(age_group) %>%
dplyr::summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Descriptive statistics by card_type
card_type_summary <- cards_long %>%
group_by(card_type) %>%
dplyr::summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Descriptive statistics by age_group and card_type (cross-tabulation)
cross_summary <- cards_long %>%
group_by(age_group, card_type) %>%
dplyr::summarise(
Sample_Size = n(),
Count_No = sum(PIN_Change_Due == 0),
Count_Yes = sum(PIN_Change_Due == 1),
Proportion_Yes = mean(PIN_Change_Due)
)
# Display descriptive statistics
cat("\nDescriptive Statistics:\n")
cat("Overall PIN_Change_Due:\n")
print(overall_summary)
cat("\nBy Age Group:\n")
print(age_group_summary)
cat("\nBy Card Type:\n")
print(card_type_summary)
cat("\nCross-Tabulation (Age Group x Card Type):\n")
print(cross_summary)
# Step 3: Fit the GEE model
gee_model <- geeglm(PIN_Change_Due ~ age_group_num + card_type,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable",
data = cards_long)
# Display the summary
cat("\nGEE Model Summary:\n")
print(summary(gee_model))
# Perform Type III-style Wald tests
cat("\nType III Wald Tests:\n")
print(anova(gee_model))
# Load required library
library(tidyverse)
library(GGally)
library(car)
library(lmtest)
library(nortest)
# Load data (replace with your file path if needed)
df_merged <- read_csv("data/feature_engineered_users.csv")
# Descriptive statistics
desc_stats <- df_merged %>%
dplyr::summarise(
across(c(total_debt,yearly_income, current_age,credit_score),
list(min = ~min(.),
q1 = ~quantile(., 0.25),
median = ~median(.),
mean = ~mean(.),
q3 = ~quantile(., 0.75),
max = ~max(.),
sd = ~sd(.),
iqr = ~IQR(.)))
)
print(desc_stats, width = Inf)
view(desc_stats)
# Subset the data to the four variables of interest
df_subset <- df_merged %>%
select(total_debt,yearly_income, current_age,credit_score)
# correlation matrix
with(df_subset,cor(cbind(total_debt,yearly_income, current_age,credit_score)))
# weak <0.5  0.8>moderate >.5 strong>0.8 1
# Creating scatterplot matrix
ggpairs(df_subset,
columnLabels = c("Total Debt", "Yearly Income", "Current Age","Credit Score"))
# Fitting the multiple regression model in R
lm <- lm(total_debt~yearly_income+current_age+credit_score,data=df_subset)
summary(lm)
# Finding the variance inflation factors (VIFs) in R:
vif(lm)
# Making all the necessary diagnostic plots in R
## Residuals vs Fitted values(y^)
ggplot(lm,aes(x=.fitted,y=.resid))+geom_point()+
geom_hline(yintercept=0,lty=2)+labs(x="Fitted Values",y="Residuals")+
theme_classic()
## Residuals Vs Explanatory Variables
### Linearity between Residuals Vs yearly_income controlling for current_age and credit_score
ggplot(lm,aes(x=yearly_income,y=.resid))+geom_point()+
geom_hline(yintercept=0,lty=2)+labs(x=expression(X[1]),y="Residuals")+
theme_classic()+geom_smooth()
### Linearity between Residuals Vs current_age controlling for yearly_income and credit_score
ggplot(lm,aes(x=current_age,y=.resid))+geom_point()+
geom_hline(yintercept=0,lty=2)+labs(x=expression(X[2]),y="Residuals")+
theme_classic()+geom_smooth()
### Linearity between Residuals Vs credit_score controlling for yearly_income and current_age
ggplot(lm,aes(x=credit_score,y=.resid))+geom_point()+
geom_hline(yintercept=0,lty=2)+labs(x=expression(X[1]),y="Residuals")+
theme_classic()+geom_smooth()
## normality of residuals
ggplot(lm,aes(sample=.resid))+stat_qq()+stat_qq_line(color="red")+
theme_classic()
# Shapiro-Wilk test to assess the normality of the error terms by using the residuals.
shapiro.test(residuals(lm))
# Breusch-Pagan test to assess the equal spread of error terms.
bptest(lm,student=FALSE)
